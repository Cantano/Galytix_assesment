#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun  5 10:11:43 2021

@author: kantnerj
"""

import numpy as np
from csv import reader


# skip first line i.e. read header first and then iterate over each row od csv as a list
with open('vectors.csv', 'r') as read_obj:
    csv_reader = reader(read_obj)
    header = next(csv_reader)
    values = header[0].split(" ")
    values = np.array(values)
    values = values.astype(np.int)
    
    words = []
    vectors = np.zeros((values[0],values[1]))
    # Check file as empty
    if header != None:
        # Iterate over each row after the header in the csv
        i = 0
        for row in csv_reader:
            # row variable is a list that represents a row in csv
            #print(row)
            
            row = ",".join(row)
            #print(row)
            
            
            if i%1000 == 0:
                print(i)
            
                
            text = row#"</s> 0.0011291504 -0.00089645386 0.00031852722 0.0015335083 0.0011062622 -0.0014038086 -3.0517578e-05 -0.0004196167 -0.0005760193 0.0010757446 -0.0010223389 -0.00061798096 -0.00075531006 0.0014038086 -0.0016403198 -0.00063323975 0.0016326904 -0.0010070801 -0.0012664795 0.00065231323 -0.000415802 -0.0010757446 0.0015258789 -0.0002746582 0.00014019012 0.0015716553 0.0013580322 -0.000831604 -0.0014038086 0.0015792847 0.00025367737 -0.0007324219 -0.00010538101 -0.0011672974 0.0015792847 0.00065612793 -0.0006599426 2.9206276e-06 0.0011291504 0.0004272461 -0.00037002563 -0.0011520386 0.0012664795 -3.516674e-06 0.00026512146 -0.00040245056 0.0001411438 -3.361702e-05 0.00075912476 -0.0005187988 -7.104874e-05 0.00060272217 -0.00050735474 -0.001625061 -0.00043678284 -0.0009918213 -0.0012207031 -0.00032234192 6.866455e-05 -0.0011672974 -0.00051116943 0.001411438 0.00033569336 -0.0004749298 -0.001373291 0.00036621094 -0.0014419556 -0.00060653687 0.0008010864 0.0011291504 -0.0008354187 -0.001159668 0.00091552734 0.0005226135 -0.00032806396 0.0015945435 -0.0015792847 -0.0003566742 0.00049591064 0.0010147095 -0.0010986328 -0.00016593933 -0.00014209747 -0.00026130676 0.0012588501 3.862381e-05 0.00016880035 -0.0010299683 0.0016098022 0.00062942505 0.00041770935 -0.0013504028 0.0003490448 0.0011444092 -0.0012054443 -0.0011825562 0.0009498596 6.055832e-05 1.0728836e-05 -0.000667572 0.0012435913 0.0006904602 5.555153e-05 -0.0008621216 -0.0011672974 0.0012130737 -0.0008049011 -0.0008773804 0.00022792816 -0.00039672852 -0.0008583069 0.00028800964 -0.0015869141 0.00048446655 -0.001121521 1.9669533e-06 -0.00037956238 0.000705719 -0.0015869141 0.001625061 0.0015563965 -0.0004310608 0.0009841919 0.00090408325 -0.0013961792 0.0012054443 -0.0007019043 0.0002708435 -0.0012359619 0.0006904602 -0.0008430481 0.0013427734 -0.0014343262 -0.0006713867 0.0015487671 -0.0010986328 0.0011901855 -0.0014266968 -0.0006828308 -0.00078582764 0.00048065186 0.0004081726 -0.00063705444 0.0001449585 -0.0009765625 0.001449585 8.456409e-07 -0.001663208 -0.00032806396 0.00062942505 -0.0014343262 -0.0003414154 0.0011520386 -0.0005302429 -0.0004711151 -0.0008506775 -0.0013809204 -0.0012435913 -0.0013275146 0.0010757446 0.0013198853 -0.00030326843 -3.7431717e-05 0.0011825562 -0.0013580322 -0.001045227 5.6743622e-05 -0.0010147095 0.00043296814 -0.0015716553 -9.10759e-05 0.0010604858 -0.00060272217 -0.0015335083 -0.0015335083 0.000541687 0.001335144 0.0004119873 -0.00031089783 0.00017642975 -0.0001373291 -0.0006980896 -0.0008621216 -0.001083374 -2.9802322e-05 0.0008010864 0.0006790161 0.00033569336 -0.0013885498 0.0013504028 0.00023460388 -0.001335144 -0.0008735657 -0.00074386597 0.001083374 6.055832e-05 -0.0012664795 0.0011901855 -0.00062179565 1.359731e-07 0.0012741089 -0.0009841919 -0.0015487671 0.0015563965 -0.0013122559 -0.00079345703 0.0015335083 0.0012969971 -0.00018024445 0.00091934204 0.0012054443 0.00077056885 -0.0016555786 0.00077056885 0.001449585 -0.0013046265 0.00061035156 0.0006599426 0.0012588501 0.0014190674 -0.0012207031 -0.0015106201 0.0011291504 0.0013427734 0.001663208 -0.0005722046 -0.0005569458 0.00039863586 -0.0002708435 0.00049591064 0.0016098022 -0.000705719 0.00062561035 -0.0009765625 -0.00018978119 9.536743e-05 -0.0005187988 -0.0002040863 -0.0008277893 -0.00012302399 0.00076293945 0.00032234192 -0.0012435913 0.0009918213 0.0010604858 -0.001411438 9.679794e-05 -0.0015563965 0.0002193451 -5.531311e-05 -0.00091171265 -0.0014877319 0.0013656616 -0.0008430481 -0.0004196167 0.00032424927 -0.0010070801 0.00012588501 -0.00045585632 0.00019264221 -0.00026893616 0.0014953613 -0.0015869141 0.0005912781 -0.0014648438 0.0009651184 -0.0012817383 0.0016021729 0.0010910034 -0.0013122559 0.0010910034 -0.00051116943 0.0003452301 0.001045227 -0.00020694733 0.00090408325 0.000667572 0.0011062622 -0.0008735657 -0.00037574768 -0.00025749207 -9.1552734e-05 0.0014343262 -0.0011825562 -8.72612e-05 0.0013275146 -0.00015830994 0.0012893677 -0.0009841919 -0.0005493164 -0.0015487671 0.001373291 -6.0796738e-05 -0.0008239746 0.0013275146 0.001159668 0.0005683899 -0.0015640259 -0.00012302399 -8.6307526e-05"
            pole = text.split(" ")
            word = pole.pop(0)
            pole = np.array(pole)
            vec =  pole.astype(np.float)
            #vectors = np.array([vec])
            #words = np.array([word])
            words.append(word)
            
            vectors[i] = vec
            
            i += 1







